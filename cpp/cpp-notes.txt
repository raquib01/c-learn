--> Pending
	<algorithm> library
	STL library

------------------ C++ Notes ------------------
- C++ is a superset of C, any valid c prog is a valid c++ prog
- statictically typed | Object Oriented | Compiled

# Data Types:

	-> Primitive
		1. Int		| 32bit
		2. Float	| 32bit
		3. Double	| 64bit
		4. Char		| 8bit
		5. bool		| 1bit
		6. void
		7. wide char| 16 or 32 bit
		8. auto

	-> Derived
		1. Array
		2. String

	-> User Defined
		1. Enum
		2. Struct
		3. Union

		
# Data Type Modifier
	1. unsigned
	2. signed
	3. long
	4. short

# Literal Suffix
	U -> unsigned
	L -> long
	F -> Float
	2.3 -> default Double
	2 -> default Int
	"abc"s -> for string

# headers
	iostream -> input / output function
	iomanip -> manipulators
	cstring -> char string
	cmath -> for mathematical functions
	string -> for string data type and its methods
	fstream -> file io
	
	
# Namespace
	Identifiers are declared under namespace, so that diff Identifiers having same name wont collide
	It helps us to give a named logical scope for Identifiers
	eg: using namespace std; or std::cout<<"hello"
		namespace Myspace{
			int a,b;
		}
		Myspace::a = 5;

# Accessing Global Variable
	if you want to access global variable while ignoring local variable use -> ::var

# Input / Output
	header file: #include<iostream>
	1. << (insertion operator)
	2. >> (extraction operator)

	std::cin and std::cout is used for i/o

# Reference Variable
	two variable pointing to same address
	int a = 5;
	int &b = a;

# Inline Function
	inline int product(int a, int b){
		return a*b;
	}

# Default Arguments -> cpp supports default Arguments(def arg must be at the extreme right)
		
# Built-in Max and Min function
	max(a,b) and min(a,b)

# String
	1. String as char array:
		char s[10] = "raquib";	-> definition
		cin>>s;					-> taking input
		cout<<s;				-> giving output
		cin.getline(s,<len>);	-> taking input as whole line

		header:<cstring>
		methods:
		1. strcpy()
		2. strcmp()
		3. strlen()
		4. strcat()
		5. strchar()
		6. strstr()

	2. String as String (class)
		string s = "raquib";	-> definition
		cin>>s;					-> taking input
		cout<<s;				-> giving output
		getline(cin,s);			-> taking input as whole line

		header: <string>
		methods:
		size()
		operator+
		append()
		compare()
		empty()
		erase()
		find()
		insert()
		substr()
		stoi()
		clear()

	


# String Data type
	#include<cstring>

	#include<string>
	1. Declararion

	2. Functions:
		a. concatenate using '+'
		b. append()
		c. clear()
		d. compare()
		e. empty() -> return 1 if str is empty
		f. erase()
		g. copy()
		h. insert()
		i. length() or size()
		j. substr()
		k. stoi()
		l. to_string()
		m. find() and replace()
		n. pop_back()
		o. begin() and rbegin()
		p. end() and rend()



# Algorithm
	include<algorithm>:
	sort(a.begin(),a.end(),<comparatior fucn>);
	transform();


# Dynamic Allocation

	* New Operator
		int* ptr = new int(5)  --> here 5 is the value
		int* arr = new int[6]  --> here 6 is the size of arr

	* Delete Operator
		delete ptr;		--> freeing single space
		delete[] arr;	--> freeing block

# Manipulator use <iomanip> or <ios>
	1. cout << std::boolalpha; -> for printing 'true' and 'false' of bool data type
	2. cout << std::noboolalpha;
	3. cout << std::endl -> print next output in newline
	4. cout << std::flush -> clears buffers
	
	-- Table --
	5. cout << std::setw(10) << "raquib" << "khan";
	6. cout << std::right -> for right align
	7. cout << std::left -> for left align
	8. cout << std::internal -> for justify align

	-- number --
	9. cout << std::dex | hec | oct;
	10. cout << setprecision(10)
	


# Enumeration
	enum meal{breakfast,lunch,dinner}



------------------  OOPS  ------------------

# WHY OOPS
	1. Modularity -> can break the prog in modules
	1. Reusability -> by making minimal change, new code can be written(DRY)
	2. Data Security
	3. Close to Real World
	4. Maintainability 

# 4 Pillars of OOPS
	1. Encapsulation -> binds the related data together and protect it from others
	2. Abstraction	-> hide unnecessary data complex info and provide simplicity
	3. polymorphism	-> a entity takes many forms, Overloading and overriding
	4. inheritance -> a child possess attribute & behaviour of parents

# Object: Instance of a class
	for eg: car
	it contains behaviour(method) eg. driving and attribute(Instance var) eg: name, color

# Class:
	A blueprint thats shows method/Instance var a object of this class supports

# Method: 
	Logics and Action to be perform with a object
	
	Two ways to define methods
		1. declare it under the class and define it outside using scope resolution
		2. directly define it under the class(it will be inline func)
	
	(all methods/member function has "this" pointer pointing to the self object)


# Instance Variable: 
	object stores data in instance var

# Access Specifiers:
	1. Private - only class and friend function can access(default)
	2. Protected - only class and friend function and derived class can access
	3. Public - anyone can access

# Constructor
	two types:
		1. default constructor (no args)
		2. parameterized constructor
		
	1. special method that executes every time u create an object
	2. Constructor name == class name
	3. Does not have any return type

	Implicit Declaration: Rectangle r1(3,4)
	External Declaration: Rectangle r1 = Rectangle(3,4)

	* Constructor Overloading Exists

# Destructor
	1. special method that executes whenever object gets out of scope or u del a pointer pointing to an obj
	2. Destructor name == ~Constructor name
	3. does not have any return type and dont take any arguments
	4. use for freeing memory / closing files

# this keyword: refer to current object

# Friend Fun and Friend Class
	- not a member of a class
	- have access to private and protected members
	- do not have access to this pointer
	- invoked directly without any obj or class

	friend <func_declaration>; -> inside the class
	friend class <class_name> -> making all members of that class as friend function
	

# Static Member 
	1. Variable
		(1 copy var associate with class.)
		need to be declare like this

		class <class-name>
		{
			static int count;
		};

		int <class-name>::count;

	2. Function
		it has access to only static members of the class
		it is called using class name, need no obj creation

# Copy Constructor
	used to initialize new Obj 'A' as a copy of prev defined obj 'B'

	calling of the cpy Constructor:
	1. Number b(a);		// custom cpy Constructor
	2. Number b = a;	// custom cpy Constructor

	Note: 
	Default Copy constructor is called in following condition:
    	1. if there is no copy constructor specified
    	2. using assignment operator after declaration

	
# inheritance
	- Base Class: Parent class
	- Derived Class: Child Class

	-> Types:
		1. Single Level inheritance: 1 parent 1 Child
		2. Multiple Inheritance: many parent 1 child
		3. Heirarchical Inheritance: 1 parent many child
		4. Multilevel Inheritance: parent of parent > parent > child
		5. Hybrid Inheritance: mixed structure
		 
	-> Syntax
		class <class_name>: <visibility-mode> <base-class>, <visibility-mode> <base-class>{
			//code here
		}

	-> visibility mode / Access Specifier:
		Public  -> base-class | Public   ----->   derived-class | Public
				   base-class | Protected   ----->   derived-class | Protected
		
		Private -> base-class | Public   ----->   derived-class | Private
				-> base-class | Protected   ----->   derived-class | Private

		Protected -> base-class | Public   ----->   derived-class | protected
				  -> base-class | Protected   ----->   derived-class | protected


	Note:
	1. default visibility mode is private
	2. private member gets inherit but u cant access in the derived class; u need to call public method of base class for accessing
	3. base constructor called before derived constructor
		syntax:
			class Programmer: private Employee{
				public:
					Programmer(int a, int b):Employee(a){
						//code here
					}
			}

	# Function overriding
		parent class and child class having same name and parameters function...
		parents functions gets override by childs

# Virtual Base Class:
            Student
               |
    Test-----------------Sports
      |                     |
      |                     |
      -----------------------
                |  
                |
              Result  

	if Student has var a, it gets inherited by Test and Sports
	and when Result inherits from Test and Sports, it has two copy of var a, one from Test and one from Sports
	To resolve this ambigiuty
	Student is set as a virtual Base like this

	class Test: virtual Student{
	    //code here
	}
	class Sports: virtual Student{
	    //code here
	}

	Now Result will have only one copy of var a

# Polymorphism
	-> Two types
		1. Compile Time Polymorphism
			a. Function Overloading
			b. Operator Overloading

		2. Run Time Polymorphism
			a. Virtual Function


	# Function Overloading works in cpp
		same name functions having different parameters works..
		it judge the function on the basis of:
			1. order of param
			2. type of param
			3. no of param

	# Operator Overloading:
		see code


	# Virtual Function
		virtual func is used when function are overridden

		suppose class B is inherited from class A (A --> B)
		there is a dislplay() in A and in B

		A *ptr = &b_obj;
		b_obj->display(); ---> this will call display() of class A 

		here compiler does early binding, means compiler look for pointer type and do things and ignores obj_type

		if we mention virtual in base class --> virtual void display()
		here compiler does late binding, means it considers the obj_type

	# Pure Virtual Function
		virtual display() = 0; here we make it compulsory for the derived class to override this function

	# Abstract Base Class
		any class having atleast 1 pure virtual function is an Abstract Base Class
		you cannot instantiate an object from ABC(Abstract Base Class)
		All of the pure virtual functions must be override by derived classes in order to function

# File I/o
	header : fstream

	* Writing a file
		ofstream obj("i.txt");
		obj<<"This is the new entry";
	
	* Reading a file
		i. basic reading
			string s;
			ifstream obj("i.txt");
			obj>>s;
		
		ii. reading whole line
			string s;
			ifstream obj("i.txt");
			getline(obj,s)

	* Opening a file
		1.
			ofstream obj("i.txt");		-> for writing
				or
			ofstream.open("i.txt");


		2.  
			ifstream obj("i.txt");		-> for reading
			ifstream.open("i.txt");

	* Closing a file
		obj.close();


	* Reading using loop:
		while(obj.eof==0){//read using getline};

# For Template:
	1. Class Template
		template <class T1,classT2>

		class C1{
			//code here
		}

		C1 <int,float> c;

	2. Function Template
		template <typename T1>
		T sum(T a, T b){
			return a+b;
		}


# STL
	Containers---------Algorithms------------Iterator
		|					|					|
		v					v					v
	stores data			process data		points to data


	1. Sequence Container --stores in linear fashion
	eg: list, vector, dequeue

	2. Associative Container	--Direct Access
	eg: set,multiset,map, multimap

	3. Derived Container --Real world modelling
	eg: stack,queue,priority queue

